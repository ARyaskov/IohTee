import {
  AbiEvent,
  TransactionReceipt,
  parseEventLogs,
  ParseEventLogsReturnType,
} from "viem"
import { BaseContract, TxOptions, CtorParams, isCtorAccountParamPure } from "@riaskov/iohtee-abi-wrapper"
export { isCtorAccountParamPure, CtorParams, TxOptions }

export interface {{contractName}}Event {
  eventName: string
  args: any
  address: `0x${string}`
  blockHash: `0x${string}`
  blockNumber: bigint
  data: `0x${string}`
  logIndex: number
  removed: boolean
  topics: [] | [`0x${string}`, ...`0x${string}`[]]
  transactionHash: `0x${string}`
  transactionIndex: number
}

{{#each events}}
{{> event_types contractName=../contractName}}
{{/each}}

export enum {{contractName}}EventName {
{{#each events}}
  {{> event_enum contractName=../contractName}}
{{/each}}
}

const abi = JSON.parse(`{{abi}}`)

export class {{contractName}}Contract extends BaseContract {
/// GETTERS
{{#each getters}}
  {{> getter contractName=../contractName}}

{{/each}}

/// SETTERS
{{#each functions}}
  {{> function contractName=../contractName}}

{{/each}}

/// EVENTS
{{#each events}}
  {{> event_utils contractName=../contractName}}

{{/each}}

  static parseLogs(receipt: TransactionReceipt): ParseEventLogsReturnType {
    const logs = parseEventLogs({
      abi: abi as any,
      logs: receipt.logs,
    })
    return logs as any
  }

  static hasEvent(receipt: TransactionReceipt, eventName: {{contractName}}EventName): boolean {
    return parseEventLogs({ abi: abi, logs: receipt.logs }).some((log: any) => log.eventName === eventName)
  }

  static extractEventFromReceipt<T>(receipt: TransactionReceipt, eventName: {{contractName}}EventName): T {
    return parseEventLogs({ abi: abi, logs: receipt.logs }).find((log: any) => log.eventName === eventName) as T
  }

  static parseEvents(receipt: TransactionReceipt): {{contractName}}Event[] {
    return parseEventLogs({ abi: abi, logs: receipt.logs }).map((log: any) => {
      return {
        eventName: log.eventName,
        args: log.args,
        address: log.address,
        blockHash: log.blockHash,
        blockNumber: log.blockNumber,
        data: log.data,
        logIndex: log.logIndex,
        removed: log.removed,
        topics: log.topics,
        transactionHash: log.transactionHash,
        transactionIndex: log.transactionIndex,
      }
    })
  }

  constructor(deployedContractAddress: `0x${string}`, params: CtorParams) {
    super(deployedContractAddress, params, abi)
  }
}
