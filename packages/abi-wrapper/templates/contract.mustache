import {
  Abi,
  AbiEvent,
  createPublicClient,
  createWalletClient,
  getContract,
  http,
  PublicClient,
  WalletClient,
  GetContractReturnType,
  TransactionReceipt,
  parseEventLogs,
  ParseEventLogsReturnType,
  extractChain
} from "viem"
import { mnemonicToAccount } from "viem/accounts"
import * as chains from "viem/chains"

export interface TxOptions {
  value?: bigint
}

export type CtorBaseParams = {
  cachePeriod?: number
}

export type CtorAccountParamPure = CtorBaseParams & {
  httpRpcUrl: string
  networkId: number
  mnemonic: string
  hdPath: `m/44'/60'/${string}`
}

export type CtorAccountParamViem = CtorBaseParams & {
  publicClientViem: PublicClient
  walletClientViem: WalletClient
}

export function isCtorAccountParamPure(
  params: CtorBaseParams,
): params is CtorAccountParamPure {
  return (
    (params as CtorAccountParamPure).httpRpcUrl !== undefined &&
    (params as CtorAccountParamPure).mnemonic !== undefined
    )
}

export type CtorParams = CtorAccountParamPure | CtorAccountParamViem

export interface {{contractName}}Event {
  eventName: string
  args: any
  address: `0x${string}`
  blockHash: `0x${string}`
  blockNumber: bigint
  data: `0x${string}`
  logIndex: number
  removed: boolean
  topics: [] | [`0x${string}`, ...`0x${string}`[]]
  transactionHash: `0x${string}`
  transactionIndex: number
}

{{#each events}}
{{> event_types contractName=../contractName}}
{{/each}}

export enum {{contractName}}EventName {
{{#each events}}
  {{> event_enum contractName=../contractName}}
{{/each}}
}

const abi = JSON.parse(`{{abi}}`)

export class {{contractName}}Contract {
  private readonly _publicClient: PublicClient
  private readonly _walletClient: WalletClient
  private readonly _address: `0x${string}`
  private readonly _contract: GetContractReturnType
  private readonly _abi: any

/// GETTERS
{{#each getters}}
  {{> getter contractName=../contractName}}

{{/each}}

/// SETTERS
{{#each functions}}
  {{> function contractName=../contractName}}

{{/each}}

/// EVENTS
{{#each events}}
  {{> event_utils contractName=../contractName}}

{{/each}}

  static parseLogs(receipt: TransactionReceipt): ParseEventLogsReturnType {
    const logs = parseEventLogs({
      abi: abi as any,
      logs: receipt.logs,
    })
    return logs as any
  }

  static hasEvent(receipt: TransactionReceipt, eventName: {{contractName}}EventName): boolean {
    return parseEventLogs({ abi: abi, logs: receipt.logs }).some((log: any) => log.eventName === eventName)
  }

  static extractEventFromReceipt<T>(receipt: TransactionReceipt, eventName: {{contractName}}EventName): T {
    return parseEventLogs({ abi: abi, logs: receipt.logs }).find((log: any) => log.eventName === eventName) as T
  }

  static parseEvents(receipt: TransactionReceipt): {{contractName}}Event[] {
    return parseEventLogs({ abi: abi, logs: receipt.logs }).map((log: any) => {
      return {
        eventName: log.eventName,
        args: log.args,
        address: log.address,
        blockHash: log.blockHash,
        blockNumber: log.blockNumber,
        data: log.data,
        logIndex: log.logIndex,
        removed: log.removed,
        topics: log.topics,
        transactionHash: log.transactionHash,
        transactionIndex: log.transactionIndex,
      }
    })
  }

  constructor(deployedContractAddress: `0x${string}`, params: CtorParams) {
    this._address = deployedContractAddress

    if (isCtorAccountParamPure(params)) {
      let network = extractChain({
        chains: Object.values(chains) as any,
        id: params.networkId,
      })
      // @ts-ignore
      this._publicClient = createPublicClient({
        batch: {
           multicall: true,
        },
        // @ts-ignore
        chain: network as any,
        transport: http(
          params.httpRpcUrl,
          {
            batch: true,
          }
        ),
      })
      this._walletClient = createWalletClient({
        // @ts-ignore
        chain: network as any,
        transport: http(
          params.httpRpcUrl,
          {
             batch: true,
          }
        ),
        account: mnemonicToAccount(params.mnemonic, { path: params.hdPath }),
      })
    } else {
      this._publicClient = params.publicClientViem
      this._walletClient = params.walletClientViem
    }

    this._abi = abi

    this._contract = getContract({
      address: this._address,
      abi: this._abi,
      client: {
        public: this._publicClient as never,
        wallet: this._walletClient as never,
      },
    })

  }

  publicClient(): PublicClient {
    return this._publicClient
  }

  walletClient(): WalletClient {
    return this._walletClient
  }

  contract(): GetContractReturnType {
    return this._contract
  }

  address(): `0x${string}` {
    return this._address
  }

  abi(): Abi {
    return this._abi
  }

  events(): AbiEvent[] {
    return this.abi().filter((e) => e.type === 'event') as AbiEvent[]
  }
}
